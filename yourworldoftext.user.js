// ==UserScript==
// @name         WorldSaver
// @namespace    https://github.com/qmhQTqiGh8AGfqYkNyP7/WorldSaver
// @icon         http://www.yourworldoftext.com/static/favicon.png
// @version      0.1
// @description  Allows to save yourworldoftext.com worlds as raw HTML
// @author       Nipah~
// @match        http://www.yourworldoftext.com/*
// @grant        none
// @run-at       document-end
// ==/UserScript==


/* jshint strict: true */
/* jshint esversion: 6 */

(function () {
    'use strict';

    var VERSION = '0.1';
    var HTML_TEMPLATE = [
`<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WorldSaver</title>
    <style type="text/css">
    * {
        margin: 0;
        padding: 0;
    }
    #container {
        font-family: 'Courier New';
        white-space: pre;
        line-height: 18px;
        letter-spacing: 0.4px;
    }
    .dark {
        color: white;
        background-color: black;
    }
    .cell {
        position: absolute;
        overflow: hidden;
        width: 160px;
        height: 144px;
    }
    .cell table {
        line-height: 18px;
        table-layout: fixed;
    }
    .cell table tr {
        height: 18px;
    }
    </style>
</head>
<body>
    <!-- Autogenerated with WorldSaver userscript. Nipah~ -->
    <div id="meta" style="display: none;">
        <div id="meta_url"></div>
        <div id="meta_date"></div>
        <div id="meta_version"></div>
        <div id="meta_settings"></div>
        <div id="meta_source"></div>
    </div>
    <div id="container"></div>
</body>
</html>`
];

    var settings = {
        minX: -8,
        minY: -8,
        maxX: 10,
        maxY: 12
    };

    var cell_rows = 8;  // number of letters
    var cell_cols = 16;  // number of letters
    var cell_width = 160;  // in pixels
    var cell_height = 144;  // in pixels
    var chunk_size_x = 20;  // number of tiles in one ajax request
    var chunk_size_y = 20;  // number of tiles in one ajax request

    Permissions.can_paste = function() {return true;};
    Permissions.can_go_to_coord = function(user, world) {return true;};

    // Permissions.can_admin = function(user, world) {return true;};
    // Permissions.can_coordlink = function(user, world, opt_tile) {return true;};
    // Permissions.can_edit_tile = function(user, world, tile) {return true;};
    // Permissions.can_protect_tiles = function(user, world) {return true;};
    // Permissions.can_read = function(user, world) {return true;};
    // Permissions.can_urllink = function(user, world, opt_tile) {return true;};
    // Permissions.can_write = function(user, world) {return true;};

    function setCellCoords(cell, coords, worldBorders) {
        var y = parseInt(coords[0], 10) - worldBorders.min_tileY;
        var x = parseInt(coords[1], 10) - worldBorders.min_tileX;
        cell.style.left = (x * cell_width) + 'px';
        cell.style.top = (y * (cell_height - 1)) + 'px';
    }

    function createCell_plain(coords, celldata, worldBorders) {
        var cell = document.createElement('div');
        cell.className = 'cell';
        cell.title = coords.join(';');
        setCellCoords(cell, coords, worldBorders);

        var content_chars = celldata.content.split('');
        var content = '';
        for (var i = 0; i < cell_rows; i++) {
            for (var j = 0; j < cell_cols; j++) {
                var c = content_chars[i * cell_cols + j];
                if (c) {
                    content += c;
                }
            }
            if (i < cell_rows - 1) {
                content += '\n';
            }
        }
        cell.innerText = content;
        return cell;
    }

    // VERY slow
    /*function createCell_table(coords, celldata, worldBorders) {
        var cell = $('<div class="cell"><table width="100%" cellspacing="0" cellpadding="0" border="0"><tbody>');
        cell.attr('title', coords.join(';'));
        setCellCoords(cell, coords, worldBorders);
        var tbody = cell.find('tbody');

        var content_chars = celldata.content.split('');
        for (var i = 0; i < cell_rows; i++) {
            var tr = $('<tr>');
            for (var j = 0; j < cell_cols; j++) {
                var td = $('<td>');
                var c = content_chars[i * cell_cols + j];
                if (c) {
                    td.text(c);
                }
                tr.append(td);
            }
            tbody.append(tr);
        }
        return cell;
    }*/

    function make_chunk(x, y) {
        x *= chunk_size_x;
        y *= chunk_size_y;
        return {min_tileX: x, min_tileY: y, max_tileX: (x + chunk_size_x - 1), max_tileY: (y + chunk_size_y - 1)};
    }

    function make_chunks(minX, minY, maxX, maxY) {
        var chunks = [];
        for (var x = minX; x <= maxX; x++) {
            for (var y = minY; y <= maxY; y++) {
                chunks.push(make_chunk(x, y));
            }
        }
        return chunks;
    }

    // create button
    document.querySelector('#nav').insertAdjacentHTML('beforeend',
`<li class="" style="border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204);">
    <div id="ywscript-btn">Save this world</div>
</li>`);


    document.querySelector('#ywscript-btn').addEventListener('click', function(event) {
        var newWindow = window.open();
        var doc = newWindow.document;
        doc.write(HTML_TEMPLATE);
        // Dollchan-Extension-Tools copypasta
        var d = new Date(),
            fn = function fn(i) {
            return parseInt(i) < 10 ? '0' + i : i;
        };
        var roomName = window.location.pathname.replace('/', '');
        roomName = roomName ? roomName + '_' : '';
        doc.title = 'yourworldoftext_' + roomName + d.getFullYear() + fn(d.getMonth() + 1) + fn(d.getDate()) + '_' + fn(d.getHours()) + fn(d.getMinutes());
        // </copypasta>
        doc.querySelector('#meta_url').innerText = window.location.origin;
        doc.querySelector('#meta_date').innerText = d.toISOString();
        doc.querySelector('#meta_version').innerText = VERSION;
        doc.querySelector('#meta_settings').innerText = JSON.stringify(settings);
        var container = doc.body.querySelector('#container');
        container.insertAdjacentHTML('afterbegin', '<div id="loading">Loading...</div>');
        container.insertAdjacentHTML('beforeend', '<div id="progress">0%</div>');

        var recievedObjects = [];
        var ranges = make_chunks(settings.minX, settings.minY, settings.maxX, settings.maxY);
        var totalRanges = ranges.length;

        function get_tile(range, onFinish) {
            var request = new XMLHttpRequest();
            request.onreadystatechange = function() {
                if (request.readyState === XMLHttpRequest.DONE) {
                    var data = JSON.parse(request.response);
                    recievedObjects.push(data);
                    doc.body.querySelector('#progress').innerText = Math.floor((100 * (totalRanges - ranges.length)) / totalRanges) + '%';
                    if (ranges.length > 0) {
                        get_tile(ranges.pop(), onFinish);
                    } else {
                        onFinish();
                    }
                }
            };

            var url = window.location.pathname + '?fetch=1';
            url += '&min_tileY=' + range.min_tileY;
            url += '&min_tileX=' + range.min_tileX;
            url += '&max_tileY=' + range.max_tileY;
            url += '&max_tileX=' + range.max_tileX;
            url += '&v=3';
            request.open('GET', url);
            request.send(null);
        }

        get_tile(ranges.pop(), function() {
            container.innerHTML = '';
            var map = {};
            var min_tileX;
            var min_tileY;
            var max_tileX;
            var max_tileY;

            for (var i = 0; i < recievedObjects.length; i++) {
                var currentObj = recievedObjects[i];
                for (var attrname in currentObj) {
                    var celldata = currentObj[attrname];
                    if (!celldata || !celldata.content || !/\S/.test(celldata.content)) {
                        continue;
                    }
                    map[attrname] = celldata;

                    var coords = attrname.split(',');
                    var y = parseInt(coords[0], 10);
                    var x = parseInt(coords[1], 10);
                    if (min_tileX === undefined || min_tileY === undefined ||
                        max_tileX === undefined || max_tileY === undefined) {
                        min_tileX = x;
                        min_tileY = y;
                        max_tileX = x;
                        max_tileY = y;
                    } else {
                        min_tileX = Math.min(min_tileX, x);
                        min_tileY = Math.min(min_tileY, y);
                        max_tileX = Math.max(max_tileX, x);
                        max_tileY = Math.max(max_tileY, y);
                    }
                }
            }
            doc.querySelector('#meta_source').innerText = JSON.stringify(map);
            var worldBorders = {min_tileX: min_tileX, min_tileY: min_tileY, max_tileX: max_tileX, max_tileY: max_tileY};
            for (var key in map) {
                // var cell = createCell_table(key.split(','), map[key], worldBorders);
                var cell = createCell_plain(key.split(','), map[key], worldBorders);
                doc.body.querySelector('#container').appendChild(cell);
            }
        });
    });

    console.log('WorldSaver ready');

})();
